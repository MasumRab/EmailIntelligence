version: '3.8'

services:
  postgres:
    # image, base volumes, healthcheck are inherited
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-emailintelligence_stag} # Staging specific DB name
    restart: unless-stopped
    # For staging, we might not need deploy limits, or they might be different.
    # Omitting deploy section for now, can be added if needed.
    networks:
      - backend_network

  backend:
    # build context, Dockerfile path, base volumes, base depends_on are inherited
    build:
      context: ..
      dockerfile: deployment/Dockerfile.backend
      target: production # Use production target for staging backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-emailintelligence_stag}
      - NODE_ENV=staging
      - LOG_LEVEL=info # Or debug, depending on staging needs
      # Other staging-specific environment variables
    command: gunicorn server.python_backend.main:app -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000
    ports: # Exposing backend port directly if needed for direct access in staging
      - "8000:8000"
    restart: unless-stopped
    networks:
      - backend_network
      - frontend_network

  frontend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.frontend # Uses the same frontend Dockerfile
    environment:
      - VITE_API_URL=/api # Assuming Nginx proxy, similar to prod
      - NODE_ENV=staging
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - frontend_network

  nginx:
    image: nginx:alpine
    ports:
      # Staging might only expose 443 or also 80 if needed for cert renewal
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/common_ssl_settings.conf:/etc/nginx/conf.d/common_ssl_settings.conf
      - ./nginx/common_security_headers.conf:/etc/nginx/conf.d/common_security_headers.conf
      - ./nginx/common_proxy_frontend.conf:/etc/nginx/conf.d/common_proxy_frontend.conf
      - ./nginx/common_proxy_backend.conf:/etc/nginx/conf.d/common_proxy_backend.conf
      - ./nginx/common_gzip.conf:/etc/nginx/conf.d/common_gzip.conf
      - ./nginx/ssl:/etc/nginx/ssl # Common SSL certs path
      # Might use shared letsencrypt volume with prod or separate one
      - ./nginx/letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - frontend_network

volumes:
  postgres_data: # Inherited, listed for clarity if needed by docker-compose merge

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge

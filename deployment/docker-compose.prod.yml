version: '3.8'

services:
  postgres:
    # image, base environment, volumes, healthcheck are inherited from docker-compose.yml
    # We only add/override production specific settings
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    networks:
      - backend_network

  backend:
    # build context, Dockerfile path, base volumes, base depends_on are inherited
    build:
      context: ..
      dockerfile: deployment/Dockerfile.backend
      target: production # Target production stage
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - NODE_ENV=production
      - LOG_LEVEL=info
      # Other production environment variables
    command: gunicorn server.python_backend.main:app -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    networks:
      - backend_network
      - frontend_network

  frontend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.frontend
    environment:
      - VITE_API_URL=/api # Adjusted for proxying through Nginx
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    networks:
      - frontend_network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/common_ssl_settings.conf:/etc/nginx/conf.d/common_ssl_settings.conf
      - ./nginx/common_security_headers.conf:/etc/nginx/conf.d/common_security_headers.conf
      - ./nginx/common_proxy_frontend.conf:/etc/nginx/conf.d/common_proxy_frontend.conf
      - ./nginx/common_proxy_backend.conf:/etc/nginx/conf.d/common_proxy_backend.conf
      # common_gzip.conf is not strictly needed for prod as it has its own, but won't hurt
      - ./nginx/common_gzip.conf:/etc/nginx/conf.d/common_gzip.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    networks:
      - frontend_network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml # Adjusted path
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - monitoring_network
      - backend_network # To scrape backend metrics

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      # Assuming grafana provisioning is also in deployment/monitoring/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - monitoring_network

volumes:
  postgres_data: # Already defined in base, but listed here for clarity if needed by docker-compose merge
  prometheus_data:
  grafana_data:

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
  monitoring_network:
    driver: bridge
